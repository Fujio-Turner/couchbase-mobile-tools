#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Copyright (c) 2022 Couchbase, Inc All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from datetime import datetime, timedelta
from typing import List, Dict, cast
from defs import DefaultGenerator, DefaultEntry, Constant, ConstantValue, ConstantType, make_c_style_varname

OUTPUT_ID = "objc"

top_level_format_header = """//
//  CBLDefaults.h
//  CouchbaseLite
//
//  Copyright (c) {year}-present Couchbase, Inc All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

// THIS IS AN AUTOGENERATED FILE, MANUAL CHANGES SHOULD BE EXPECTED TO
// BE OVERWRITTEN

#import <CouchbaseLite/CBLReplicatorTypes.h>

#ifdef COUCHBASE_ENTERPRISE

#import <CouchbaseLite/CBLVectorIndexTypes.h>

#endif

{generated}
"""

top_level_format_impl = """//
//  CBLDefaults.m
//  CouchbaseLite
//
//  Copyright (c) {year}-present Couchbase, Inc All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

// THIS IS AN AUTOGENERATED FILE, MANUAL CHANGES SHOULD BE EXPECTED TO
// BE OVERWRITTEN

#import "CBLDefaults.h"

{generated}
"""

top_level_format_exp = """# CBLDefaults.exp
#
#  Copyright (c) {year}-present Couchbase, Inc All rights reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# THIS IS AN AUTOGENERATED FILE, MANUAL CHANGES SHOULD BE EXPECTED TO
# BE OVERWRITTEN

{generated}
"""

class ObjCDefaultGenerator(DefaultGenerator):
    _type_mapping: Dict[str, str] = {
        ConstantType.BOOLEAN_TYPE_ID: "BOOL",
        ConstantType.TIMESPAN_TYPE_ID: "NSTimeInterval",
        ConstantType.SIZE_T_TYPE_ID: "uint64_t",
        ConstantType.USHORT_TYPE_ID: "unsigned short",
        ConstantType.INT_TYPE_ID: "NSInteger",
        ConstantType.UINT_TYPE_ID: "NSUInteger",
        "ReplicatorType": "CBLReplicatorType",
        "DistanceMetric": "CBLDistanceMetric",
        "ScalarQuantizerType": "CBLScalarQuantizerType"
    }

    _special_enum_values = {'SQ8'}

    def transform_var_value(self, type: ConstantType, value: ConstantValue) -> str:
        if type.subset == "enum":
            if value.val in self._special_enum_values:
                return f"kCBL{value}"
            return f"kCBL{type.id}{value}"

        if type.id == ConstantType.BOOLEAN_TYPE_ID:
            return "YES" if bool(value.val) else "NO"

        if type.id == ConstantType.TIMESPAN_TYPE_ID:
            if value.unit == "seconds":
                return str(cast(timedelta, value.val).seconds)
            else:
                raise Exception(f"Unknown unit '{value.unit}'")

        if type.id == ConstantType.UINT_TYPE_ID:
            if value.val == "max":
                return "NSUIntegerMax"
            
        if type.id == ConstantType.INT_TYPE_ID:
            if value.val == "max":
                return "NSIntegerMax"

        return str(value)

    def compute_header_line(self, prefix_name: str, constant: Constant) -> str:
        platform_type = constant.type(OUTPUT_ID)
        platform_value = constant.value(OUTPUT_ID)
        value = self.transform_var_value(platform_type, platform_value)
        ret_val = f"/** [{value}] {constant.description} */\n"
        type = self._type_mapping[platform_type.id] if platform_type.id in self._type_mapping else platform_type
        var_name = make_c_style_varname(prefix_name, constant.name)
        ret_val += f"extern const {type} {var_name};\n\n"
        return ret_val

    def compute_impl_line(self, prefix_name: str, constant: Constant) -> str:
        platform_type = constant.type(OUTPUT_ID)
        platform_value = constant.value(OUTPUT_ID)
        type = self._type_mapping[platform_type.id] if platform_type.id in self._type_mapping else platform_type
        value = self.transform_var_value(platform_type, platform_value)
        var_name = make_c_style_varname(prefix_name, constant.name)
        return f"const {type} {var_name} = {value};\n\n"
    
    def compute_exp_line(self, prefix_name: str, constant: Constant) -> str:
        var_name = make_c_style_varname(prefix_name, constant.name)
        return f"_{var_name}\n"

    def generate(self, input: List[DefaultEntry]) -> Dict[str, str]:
        generated: Dict[str, str] = {}
        generated_header = ""
        generated_impl = ""
        generated_exp = ""
        generated_exp_ee = ""
        writing_ee = False
        input = sorted(input, key=lambda x: x.ee)
        for entry in input:
            if len(entry.only_on) > 0 and not OUTPUT_ID in entry.only_on:
                continue

            if not writing_ee and entry.ee:
                generated_header += "#ifdef COUCHBASE_ENTERPRISE\n\n"
                generated_impl += "#ifdef COUCHBASE_ENTERPRISE\n\n"
                writing_ee = True
            
            generated_header += f"#pragma mark - CBL{entry.long_name}\n\n"
            generated_impl += f"#pragma mark - CBL{entry.long_name}\n\n"
            for c in entry.constants:
                if len(c.only_on) > 0 and not OUTPUT_ID in c.only_on:
                    continue
                
                generated_header += self.compute_header_line(entry.name, c)
                generated_impl += self.compute_impl_line(entry.name, c)
                next_exp = self.compute_exp_line(entry.name, c)
                if not writing_ee:
                    generated_exp += next_exp
                
                generated_exp_ee += next_exp
        if writing_ee:
            generated_header += "#endif"
            generated_impl += "#endif"

        generated["CBLDefaults.h"] = top_level_format_header.format(year = datetime.now().year, generated = generated_header)
        generated["CBLDefaults.m"] = top_level_format_impl.format(year = datetime.now().year, generated = generated_impl)
        generated["CBLDefaults.exp"] = top_level_format_exp.format(year = datetime.now().year, generated = generated_exp)
        generated["CBLDefaults_ee.exp"] = top_level_format_exp.format(year = datetime.now().year, generated = generated_exp_ee)
        return generated
                

if __name__ == "__main__":
    raise Exception("This script is not standalone, it is used with gen_defaults.py")